//[200] Smithy - this script is called every time an actor enters the world by exec it on their tiki (via shared new_generic_human.tik)
// Note: 'team' for SP actors is either 'german' or 'american'.
//       'german' is all axis actors, including Italian.
//       'american' is all allied actors, including British and Russian.
//       Find number of axis in the level with level.coop_actorArray["german"].size
//       Find number of allies in the level with level.coop_actorArray["american"].size
//       Access actors with level.coop_actorArray[team][index]
//       Turn off accuracy calculations for individual actors with .flags["coop_actorStopAccuracy"] = 1
//       Turn off accuracy calculations for all with level.coop_actorAccuracyCalcs = 0
//		 Turn off custom pain handler for individual actors with flags["coop_actorStopPainHandler"] = 1
//       Turn off custom pain handler for all with level.coop_actorPainHandler = 0
//
//       (internal use only)
//  	 [200] Smithy - added thread functionality. added SP grenade functionality. some other improvements.
// 		 [200] Smithy - added calls to itemhandler.scr for weapon handling purposes
//		 [200] Smithy - added disguise functionality (disguisehandler)
//=========================================================================
main local.thread:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/main->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	local.threadName = "coop_mod/aihandler.scr::main"

	if (!waitthread coop_mod/main.scr::inCoopMode){ end } //dont load this if we aren't in coop mode
	if (!self){ end }
	if (local.thread == NIL){ end }
	if (self.classname != "Actor"){ end }

	//println "loading " self.classname

	//make sure main.scr has loaded
	waitthread coop_mod/main.scr::waitForMainScript
	if (!self){ end }

	//[200] Smithy - adds maps we don't want to use the custom pain handler on
	if (!level.coop_painHandlerExclusionInit){
		waitthread painHandlerMapExclusions
	}

	//[200] Smithy - handles cover blown logic if this is a disguise map
	if (!level.coop_disguiseHandlerInit){
		thread disguiseHandler
	}

	wait game.ms // so entities have properly initialised
	if (!self){ end }

	thread local.thread

}end

//[200] Smithy - moved actor stuff out of main into its own func
//does all actor stuff (internal use only)
//=========================================================================
actorHandler:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/actorHandler->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if (!isAlive self){ end }	

	group.team = self.team

	//store original data
	self.flags["coop_actorAccuracy"] 			= self.accuracy
	self.flags["coop_actorAccuracyRange"] 		= (100 - self.accuracy) //100 is max accuracy
	/* use these in future???
	self.flags["coop_actorHealth"] 				= self.health
	self.flags["coop_actorGun"] 				= self.gun
	self.flags["coop_actorNoticeScale"] 		= self.noticescale
	*/

	if (level.coop_actorPainHandler){ 	//replace painhandler with our own
		thread initialisePainVars
	}
	
	//[202][hotfix] Smithy - allow us to determine if maps should force weapon drops from actors upon death
	//this is needed because the BT maps often have actors with dontdropweapons set on them individually.
	if (level.coop_forceDropWeapons){ 
		self forcedropweapon
	}

	//[200] Smithy - new func
	if (level.coop_aaMap){ 				// restore any properties that are AA specific
		thread restoreAAProperties
	}
	thread restoreSPProperties 			// restore any properties that are SP specific
	thread updateEnemyDifficulty 		// update this guy's difficulty
	thread leaveTurretUnholstered 		// make sure if he's a gunner that he leaves it unholstered

	thread addActorToArray

	self waittill death 				//'death' event is unregistered if an AI is killed or if they are removed

	if (self.flags["coop_turretUnholsterThread"]){  	//terminate unholster thread to avoid any mem leaks
		self.flags["coop_turretUnholsterThread"] end
	}

	waitframe 							//[200] Smithy - fixes NULL entities in array and other abnormalities

	thread addKillToPlayer
	thread removeActorFromArray

	if (!self){ end }

	thread coop_mod/itemhandler.scr::enableWeapon 		//[200] Smithy - make it so their weapon can now be triggered (thus picked up)

	if (level.coop_enableDisguises){
		if (self && self.fact && self.fact.attacker && self.fact.attacker.classname == "Player"){
			thread sentientIsSeen self self.fact.attacker 360
		}
	}

	if (!level.coop_noDropHealth){ 						//[200] Smithy - do our own health drops if the map allows it
		thread coop_mod/itemhandler.scr::handleHealthDrop
	}
}end

//[200] Smithy - new func
//restores properties to better reflect SP behavior (internal use only)
//=========================================================================
restoreSPProperties:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/restoreSPProperties->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	//restoreNadeCount func moved to itemhandler.scr. it is also called from global/weapon.scr now.
	//thread restoreNadeCount
}end

//[200] Smithy - new func
//restores properties to better reflect AA behavior (internal use only)
//=========================================================================
restoreAAProperties:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/restoreAAProperties->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if(group.team == "american"){
		self.runanimrate = level.coop_aaRunSpeed[group.team]
	}
}end

//adds the actor to the level.coop_actorArray array (internal use only)
//=========================================================================
addActorToArray:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/addActorToArray->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if(!isAlive self || self.classname != "Actor"){
		//error ("coop_mod/aihandler.scr::addActorToArray - never call this func from outside aihandler.scr")
		end
	}

	local.index = level.coop_actorArray[group.team].size + 1
	group.actor = self
	level.coop_actorArray[group.team][local.index] = self
}end

//removes the dead or removed actor from the actor array (internal use only)
//=========================================================================
removeActorFromArray:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/removeActorFromArray->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	local.oldArray[group.team] 		= level.coop_actorArray[group.team]
	local.newArray[group.team][1] 	= NIL
	local.j = 1
	for(local.i = 1; local.i <= local.oldArray[group.team].size; local.i++){
		local.actor = local.oldArray[group.team][local.i]
		if(local.actor != NULL && local.actor != group.actor){     //[200] Smithy - added a NULL check and actor comparison instead of index
			local.newArray[group.team][local.j] = local.actor
			local.j++
		}
	}
	level.coop_actorArray[group.team] = local.newArray[group.team]
}end

//updates the run speed for a specified actor team
//=========================================================================
updateTeamRunSpeed local.team local.speed:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/updateTeamRunSpeed->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if((local.team != "american" && local.team != "german") || local.speed == NIL){ end }
	if(local.speed < 0){ local.speed = 0 }

	level.coop_aaRunSpeed[local.team] = local.speed
	for(local.i = 1; local.i <= level.coop_actorArray[local.team].size; local.i++){
		local.actor = level.coop_actorArray[local.team][local.i]
		local.actor.runanimrate = local.speed
	}
}end

//updates the difficulty variables for individual enemy
//=========================================================================
updateEnemyDifficulty:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/updateEnemyDifficulty->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if($player == NULL || $player.size == 0 || self == NULL || self.classname != "Actor"){ end }
	thread calculateProperties self
}end

//updates the difficulty variables for all existing enemies
//=========================================================================
updateEnemyTeamDifficulty:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/updateEnemyTeamDifficulty->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if($player == NULL || $player.size == 0){ end }

	local.team = "german"
	local.actorArray[local.team] = level.coop_actorArray[local.team]

	if(local.actorArray[local.team] == NIL || local.actorArray[local.team].size == 0){
		end
	}

	for(local.i = 1; local.i <= local.actorArray[local.team].size; local.i++){
		thread calculateProperties local.actorArray[local.team][local.i]
	}
}end


//call all difficulty calculcations. we can use this to add more calculations later (internal use only)
//=========================================================================
calculateProperties local.actor:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/calculateProperties->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if(local.actor == NULL || local.actor.classname != "Actor" ){
		//error ("coop_mod/aihandler.scr::calculateProperties - never call this func from outside aihandler.scr")
		end
	}

	if(!local.actor.flags["coop_actorStopAccuracy"] && level.coop_actorAccuracyCalcs){
		thread calculateAccuracy local.actor
	}
	// add more here later ???

}end

//do accuracy calculation (internal use only)
//=========================================================================
calculateAccuracy local.actor:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/calculateAccuracy->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if(local.actor == NULL || local.actor.classname != "Actor"){
		//error ("coop_mod/aihandler.scr::calculateAccuracy - never call this func from outside aihandler.scr")
		end
	}
	if(local.actor.flags["coop_actorNewAccuracy"] && local.actor.accuracy != local.actor.flags["coop_actorNewAccuracy"]){
		local.actor.flags["coop_actorStopAccuracy"] = game.true
		println(local.actor + " has had his accuracy changed elsewhere. Ignore accuracy calculations in future.")
		end
	}

	if(level.coop_maxPlayerScalar < 0){
		level.coop_maxPlayerScalar = 0
	}
	local.accuracyMult = $player.size
	if(local.accuracyMult > level.coop_maxPlayerScalar){
		local.accuracyMult = level.coop_maxPlayerScalar
	}

	// reset to original accuracy before calculating extra accuracy
	local.actor accuracy local.actor.flags["coop_actorAccuracy"]

	if(local.accuracyMult > 1){
		local.actor accuracy (local.actor.accuracy + ((local.actor.flags["coop_actorAccuracyRange"] / level.coop_maxPlayerScalar) * local.accuracyMult))
	}

	local.actor.flags["coop_actorNewAccuracy"] = local.actor.accuracy
}end

//sets up our pain variables
//=========================================================================
initialisePainVars:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/initialisePainVars->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if(!isAlive self || self.classname != "Actor"){
		//error ("coop_mod/aihandler.scr::initialisePainVars - never call this func from outside aihandler.scr")
		end
	}

	//[200] Smithy - don't do certain actors that use their own health systems
	if (self.targetname == "friendly" || self.friendtype != NIL){
		self.flags["coop_actorStopPainHandler"] = game.true
		end
	}

	self.flags["coop_actorHandledPain"] = game.true

	if (self.health > 700){
		self.health = 100
	}

	//store the health he started with
	//[200] Smithy - improved these conditions
	if(self.flags["coop_actorActualHealth"] == NIL){
		self.flags["coop_actorActualHealth"] = self.health
	}else if(self.flags["coop_actorActualHealth"] <= 0 || self.flags["coop_actorActualHealth"] >= 1000){
		self.flags["coop_actorActualHealth"] = 100
	}

	//we don't want anyone to kill him outright
	self health 5000
}end

//handles all AI pain events (handler is global/pain.scr) (internal use only)
//=========================================================================
actorPainHandler local.attacker local.damage local.inflictor local.position local.direction local.normal local.knockback local.dflags local.meansofdeath local.location:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/actorPainHandler->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if(!isAlive self || !local.attacker){ end }

	if(self.fact){ self.fact delete } // optimised

	self.fact 				= local CreateListener
	self.fact.attacker 		= local.attacker
	self.fact.damage 		= local.damage
	self.fact.inflictor 	= local.inflictor
	self.fact.position 		= local.position
	self.fact.direction 	= local.direction
	self.fact.normal 		= local.normal
	self.fact.knockback 	= local.knockback
	self.fact.dflags 		= local.dflags
	self.fact.meansofdeath 	= local.meansofdeath
	self.fact.location 		= local.location

	group.painHandlerThread = game.true

	//println self.health

	//[200] Smithy - added fix to stop handler for this guy if their health changed elsewhere
	if(self.health != (5000 - self.fact.damage)){
		//iprintlnbold_noloc(self + " health is " + self.health + ". This shouldn't be. Don't use pain handler anymore")
		self.flags["coop_actorStopPainHandler"] = game.true
		self health 100
		self damage self.fact.attacker self.fact.damage self.fact.attacker self.fact.position self.fact.direction self.fact.normal self.fact.knockback self.fact.dflags self.fact.meansofdeath self.fact.location
		end
	}

	self health 5000 				//restore safe health

	if(waitthread friendlyFireCheck){ 	//check if we should ignore pain or not
		end
	}

	thread handlePain 				//actually do the pain

}end

//handle when AI are hurt by their teammates
//this reduces likelihood of teammates accidently killing oneanother.
//as well reducing chance that players can kill allied actors.
//this more reflects SP behaviour.
//will help improve difficulty too.
//(internal use only)
//=========================================================================
friendlyFireCheck:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/friendlyFireCheck->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if(!group.painHandlerThread){
		error ("coop_mod/aihandler.scr::friendlyFireCheck - never call this func from outside aihandler.scr")
		end
	}
	
	if (self.fact.attacker.classname == "Player" && self.team == "american"){
		println self " was hurt by player: ignoring pain"
		end(game.true)
	}else if(self.fact.attacker.team == self.team && self.fact.attacker != self && self.fact.inflictor.classname != "BarrelObject"){
		println self " was hurt by teammate: ignoring pain"
		end(game.true)
	}else if(self.fact.attacker == self){
		//println self " was hurt by himself. don't ignore pain!"
	}
}end(game.false)

//actually do pain calculations (internal use only)
//=========================================================================
handlePain:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/handlePain->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	if(!group.painHandlerThread){
		error ("coop_mod/aihandler.scr::handlePain - never call this func from outside aihandler.scr")
		end
	}

	self.flags["coop_actorActualHealth"] -= self.fact.damage

	//nope, not enough damage has been done
	if(self.flags["coop_actorActualHealth"] > 0){
		end
	}

	//fixes melee attacks
	if(self.fact.meansofdeath == 26){
		self.fact.location = 0
	}

	//enough damage has been done to kill this guy!
	self damage self.fact.attacker 150000 self.fact.attacker self.fact.position self.fact.direction self.fact.normal self.fact.knockback self.fact.dflags self.fact.meansofdeath self.fact.location

}end

//exclude our new pain handler on these maps to prevent conflicts and bugs
//you can exclude entire games from this by using first char and wildcard *.
//e.g to exlude all BT maps add e* to coop_painHandlerExclusions in variables.scr
//=========================================================================
painHandlerMapExclusions:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/painHandlerMapExclusions->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	level.coop_painHandlerExclusionInit = game.true

	if (level.coop_painHandlerExclusions[1].size == 1){
		local.array[1] = level.coop_painHandlerExclusions
		level.coop_painHandlerExclusions = local.array
	}

	local.thisMap 	= getcvar("mapname")
	local.firstChar = local.thisMap[0]

	for (local.i = 1; local.i <= level.coop_painHandlerExclusions.size; local.i++){
		local.excludedMap = level.coop_painHandlerExclusions[local.i]
		local.starChar = local.excludedMap[1]
		if (local.starChar == "*"){
			if (local.firstChar == local.excludedMap[0]){
				level.coop_actorPainHandler = game.false
				end
			}
		}else{
			if (level.coop_painHandlerExclusions[local.i] == local.thisMap){
				println("DEV: Map ("+local.thisMap+") is on the PainHandler-Exclusion List.")
				println("DEV: painhander should be off now.")
				level.coop_actorPainHandler = game.false
				end
			}
		}
	}
}end

//the main disguise handler for cover blown logic
//checks whether enemies can see a player while their
//isDisguised flag is false (i.e they have a weapon in hand)
//this func should only run once per map
//=========================================================================
disguiseHandler:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/disguiseHandler->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling

	level.coop_disguiseHandlerInit = game.true
	wait 1 //[200] Smithy - fixes level.coop_enableDisguises not being set on time - should be after init var really
	if (!level.coop_enableDisguises || level.coop_disguiseHandlerThread){ end }

	level.coop_disguiseHandlerThread = local

	while (level.coop_enableDisguises && !level.alarm){
		if ($player){
			local.enemyArray = level.coop_actorArray["german"]
			for (local.i = 1; local.i <= local.enemyArray.size; local.i++){
				local.enemy = local.enemyArray[local.i]
				if (!isAlive local.enemy){ continue }

				if (local.enemy.flags["coop_isAttacking"]){ 							//if i can see him in attack mode, also send me into attack mode
					thread sentientIsSeen local.enemy local.enemy.enemy 360
					continue
				}

				for (local.j = 1; local.j <= $player.size; local.j++){
					local.player 	= $player[local.j]
					if (isAlive local.player && local.player.has_disguise && local.player.flags["coop_hasDisguise"] && !local.player.flags["coop_isDisguised"] && local.player.dmteam != "spectator"){
						if (local.enemy cansee local.player local.enemy.fov local.enemy.sight){
							local.enemy thread attackPlayer local.player
							thread sentientIsSeen local.enemy local.player NIL 	//check to see if anyone can see him spot you
							thread sentientIsHeard local.enemy local.player 	//check to see if anyone can hear him spot you
						}
					}
				}
			}
		}
		wait 1 //doesn't have to be super quick, so no need wasting precious resources
	}
}end

//forces an enemy actor to attack the player, even when they are disguised
//=========================================================================
attackPlayer local.player:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/attackPlayer->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	local.enemy = self
	local.enemy say den_head_sighted_a //TODO: MAKE THIS COMPATIBLE WITH BT DIALOGUE
	local.enemy.enablePain = 1
	local.enemy.flags["coop_isAttacking"] = game.true
	local.enemy attackplayer
	local.enemy favoriteenemy local.player
}end

//checks to see if any enemies can 'hear' this sentient.
//if yes, then force them into attack mode
//does a vector_within using hearing value to simulate hearing distance
//=========================================================================
sentientIsHeard local.sentient local.target:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/sentientIsHeard->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	local.enemies = level.coop_actorArray["german"]
	for (local.i = 1; local.i <= local.enemies.size; local.i++){
		local.enemy = local.enemies[local.i]
		if (!local.enemy || local.enemy.flags["coop_isAttacking"] || local.enemy == local.sentient){
			continue
		}

		local.awareness = local.enemy.sound_awareness
		if (local.awareness == 0){
			local.awareness = 100.000
		}

		local.inpvs = local.enemy inpvs local.sentient
		if (!local.inpvs){
			local.fullRange = 512		//if their areas aren't connected, just do an arbitrary range
		}else{
			local.fullRange = local.enemy.hearing
			local.halfRange = local.fullRange * 0.5
		}

		//this is how engine behaves. half of hearing range will always be heard
		if (local.inpvs && vector_within local.enemy local.sentient local.halfRange){
			local.enemy thread attackPlayer local.target
			continue
		}
		//if not, check for percentage chance (awareness) to hear at full range
		if (vector_within local.enemy local.sentient local.fullRange){
			if ((randomint(99) + 1) <= local.awareness){
				local.enemy thread attackPlayer local.target
			}
		}
	}
}end

//checks to see if any enemies can see this sentient.
//if yes, then force them to attack players
//=========================================================================
sentientIsSeen local.sentient local.target local.fov:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/sentientIsSeen->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	local.enemies = level.coop_actorArray["german"]
	for (local.i = 1; local.i <= local.enemies.size; local.i++){
		local.enemy = local.enemies[local.i]
		//no point checking enemies not inside the same PVS (technically the same areaportal)
		if (!local.enemy || local.enemy.flags["coop_isAttacking"] || !local.enemy inpvs local.sentient || local.enemy == local.sentient){
			continue
		}

		if (local.fov == NIL){
			local.fov = local.enemy.fov
		}
		if (local.enemy cansee local.sentient local.fov local.enemy.sight){
			local.enemy thread attackPlayer local.target
			//thread sentientIsSeen local.enemy local.target //check to see if anyone can see him spot you
		}
	}
}end

//check if he can see any undisguised players (!isDisguised)
//i.e are they are holding a weapon
//=========================================================================
canseeUndisguisedPlayers:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/canseeUndisguisedPlayers->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	local.actor 	= self
	local.cansee 	= game.false
	if ($player){
		for (local.i = 1; local.i <= $player.size; local.i++){
			local.player = $player[local.i]
			if (!local.player.flags["coop_isDisguised"] && local.actor cansee local.player local.actor.fov local.actor.sight){
				local.cansee = game.true
			}
		}
	}
}end (local.cansee)

//checks to see if any enemies in level are in attack state
//=========================================================================
anyEnemiesInAttackState:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/anyEnemiesInAttackState->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	for (local.i = 1; local.i <= level.coop_actorArray["german"].size; local.i++){
		local.enemy = level.coop_actorArray["german"][local.i]
		if (local.enemy.thinkstate == "attack" || local.enemy.thinkstate == "pain"){
			end (game.true)
		}
	}
}end (game.false)

//this turns any attacking enemies into idle state so that we can
//enable disguises on players. called from itemhandler::giveDisguiseToAll
//their attack state is remembered so AI don't just forget about you when
//handling them inside disguiseHandler
//=========================================================================
resetEnemyThinkstates:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/resetEnemyThinkstates->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	for (local.i = 1; local.i <= level.coop_actorArray["german"].size; local.i++){
		local.enemy = level.coop_actorArray["german"][local.i]
		if (local.enemy.thinkstate == "attack" || local.enemy.thinkstate == "pain"){
			local.enemy.enableEnemy = 0
			local.enemy.flags["coop_actorResetThinkstate"] 	= game.true
			local.enemy.no_idle 							= game.true
		}
	}
	waitframe
}end

//these are actors that were attacking before resetEnemyThinkstates was called on them
//make sure they continue attacking after we've done processing them
//=========================================================================
setEnemyAttackStates:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/setEnemyAttackStates->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	for (local.i = 1; local.i <= level.coop_actorArray["german"].size; local.i++){
		local.enemy = level.coop_actorArray["german"][local.i]
		if (local.enemy.flags["coop_actorResetThinkstate"]){
			local.enemy.enableEnemy = 1
			local.enemy attackplayer
			local.enemy.no_idle 							= game.false
			local.enemy.flags["coop_isAttacking"] 			= game.true
			local.enemy.flags["coop_actorResetThinkstate"] 	= game.false
		}
	}
}end

//Improves unholstering of MG gunners...
//This will help stop any delays with AI running around weaponless
//before the attack.scr hack fix kicks in. We'll keep the other fix as a backup,
//but hopefully this func will execute first, at least most of the time.
//=========================================================================
leaveTurretUnholstered:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/leaveTurretUnholstered->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	//reclaimed this func to call on any AI that have a turret in their arsenal!
	wait 2
	if (isAlive self && waitthread isMachineGunner){
		while (isAlive self && waitthread isMachineGunner){		
			wait 1 //wait until they are not a machinegunner. doesn't have to be that fast...
		}
		if (isAlive self){
			self use self.gun
			self activatenewweapon "dual"			
		}
	}
}end

//checks if this guy is a machinegunner
//=========================================================================
isMachineGunner:{
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/isMachineGunner->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	local.MG = game.true
	local.MG = local.MG && self.type_attack 	== "machinegunner"
	local.MG = local.MG && self.type_idle 		== "machinegunner"
	local.MG = local.MG && self.type_disguise 	== "machinegunner"
	local.MG = local.MG && self.type_grenade 	== "machinegunner"
	local.MG = local.MG && self.turret
}end(local.MG)

//[200] Smithy - we may as well use scoreboard
//this adds a kill to a player if they manage to kill this actor
//=========================================================================
addKillToPlayer:
//=========================================================================
if(level.cMTE_coop_aihandler){if(!level.cMTE){level.cMTE=0}; level.cMTE++; println( "-#-#- thread aihandler/addKillToPlayer->"+level.cMTE+"" )} //[202] chrissstrahl - this is to debug the coop mod thread handling
	waitframe
	if (!self){ end }
	if (self.fact && self.fact.attacker && self.fact.attacker.classname == "Player"){
		self.fact.attacker addkills 1
	}
end